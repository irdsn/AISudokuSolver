##################################################################################################
#                                        SCRIPT OVERVIEW                                         #
#                                                                                                #
# This module reads a Sudoku solving trace (JSON format) and uses OpenAI's API to generate       #
# a natural language summary of the solving process.                                             #
##################################################################################################

##################################################################################################
#                                            IMPORTS                                             #
##################################################################################################

import os
import json
from dotenv import load_dotenv
from openai import OpenAI

##################################################################################################
#                                        CONFIGURATION                                           #
##################################################################################################

# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

##################################################################################################
#                                        IMPLEMENTATION                                          #
##################################################################################################

def generate_summary_from_trace(trace_path: str, steps: int, duration: float) -> str:
    """
    Generates a natural language summary of a Sudoku solving process using an LLM.

    This function reads a trace file generated during backtracking resolution,
    extracts the number of placed cells, and queries the OpenAI API to obtain
    a textual summary of how the puzzle was solved. The summary includes
    difficulty estimation, solving strategy, and performance insights.

    Args:
        trace_path (str): Path to the *_solution_trace.json file.
        steps (int): Total number of recursive steps taken by the solver.
        duration (float): Total solving time in seconds.

    Returns:
        str: A summary generated by the LLM, or an error message if the process fails.
    """

    try:
        with open(trace_path, "r") as f:
            trace = json.load(f)
    except Exception as e:
        return f"⚠️ Failed to read trace file: {e}"

    filled_cells = len(trace)

    prompt = f"""
        You are a Sudoku expert analyzing how a specific puzzle was solved.
    
        A solver has completed a puzzle by filling {filled_cells} empty cells. The process involved {steps} recursive steps and took {duration:.2f} seconds.
    
        Write a concise and informative summary (3–5 sentences) focused only on this specific puzzle and its resolution. Include:
        - An estimation of the puzzle's difficulty.
        - A short analysis of how the puzzle was approached (e.g., constraint-focused, regional clustering).
        - Observations on time and efficiency.
    
        Avoid general comments about the solver or suggestions for improvement. Focus strictly on interpreting the trace and performance of this specific resolution.
        Use a professional and neutral tone.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"⚠️ LLM call failed: {e}"
